# Generated by CodiumAI

import pytest
from BigramModel import build_bigram_model
import numpy as np


class TestBuildBigramModel:

    # Function handles typical data with valid bigrams correctly
    def test_typical_data_handling(self):
        data = np.array([1, 2, 3, 4, 1, 2])
        full_lookup = np.array([1, 2, 3, 4])
        expected_result = np.array(
            [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]]
        )
        result = build_bigram_model(data, full_lookup)
        assert np.array_equal(result, expected_result)

    # Correctly maps values to indices using the full_lookup array
    def test_mapping_values_to_indices(self):
        data = np.array([100, 200])
        full_lookup = np.array([100, 200])
        expected_result = np.array([[0, 1], [1, 0]])
        result = build_bigram_model(data, full_lookup)
        assert np.array_equal(result, expected_result)

    # Data array is empty
    def test_empty_data_array(self):
        data = np.array([])
        full_lookup = np.array([1, 2])
        expected_result = np.zeros((2, 2), dtype=int)
        result = build_bigram_model(data, full_lookup)
        assert np.array_equal(result, expected_result)

    # Data contains only one element
    def test_single_element_data(self):
        data = np.array([42])
        full_lookup = np.array([42])
        expected_result = np.zeros((1, 1), dtype=int)
        result = build_bigram_model(data, full_lookup)
        assert np.array_equal(result, expected_result)

    # All elements in data are the same, resulting in one type of bigram
    def test_repeated_elements_bigram(self):
        data = np.array([7, 7, 7])
        full_lookup = np.array([7])
        expected_result = np.array([[2]])
        result = build_bigram_model(data, full_lookup)
        assert np.array_equal(result, expected_result)
